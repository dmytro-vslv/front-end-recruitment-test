@layout('layouts/main')
@set('title', 'Checkout')

@section('body')
  <div class="checkout">
    {{--  FORM  --}}
    <form class="checkout__form" id="form">
      <div class="checkout__fieldset checkout__fieldset--personal">
        <h2 class="checkout__title checkout__title--personal">Personal Information</h2>

        <div class="checkout__first-name input-group">
          <label class="input-group__label" for="firstName">First name</label>
          <input class="input-group__input" type="text" id="firstName" name="firstName" placeholder="Elon" />
          <span class="input-group__error"></span>
        </div>

        <div class="checkout__last-name input-group">
          <label class="input-group__label" for="lastName">Last name</label>
          <input class="input-group__input" type="text" id="lastName" name="lastName" placeholder="Musk" />
          <span class="input-group__error"></span>
        </div>

        <div class="checkout__email input-group">
          <label class="input-group__label" for="email">Email</label>
          <input class="input-group__input" type="text" id="email" name="email" placeholder="elon@spacex.com" />
          <span class="input-group__error"></span>
        </div>

        <div class="checkout__country input-group">
          <label class="input-group__label" for="country">Country</label>
          <select class="input-group__select" id="country" name="country">
            <option value="US" selected>United States</option>
            <option value="GB">United Kingdom</option>
            <option value="DE">Germany</option>
            <option value="PL">Poland</option>
          </select>
        </div>

        <div class="checkout__postal-code input-group">
          <label class="input-group__label" for="postalCode">Postal Code</label>
          <input class="input-group__input" type="text" id="postalCode" name="postalCode" placeholder="10001" />
          <span class="input-group__error"></span>
        </div>

        <div class="checkout__phone input-group">
          <label class="input-group__label" for="phone">Phone Number</label>
          <input class="input-group__input" type="tel" id="phone" name="phone" placeholder="(212) 692-93-92" />
          <span class="input-group__error"></span>
        </div>
      </div>

      <div class="checkout__fieldset checkout__fieldset--payments">
        <h2 class="checkout__title checkout__title--payments">Payment Details</h2>

        <div class="checkout__credit-card input-group input-group--credit-card">
          <label class="input-group__label" for="creditCard">Credit Card Number</label>
          <input class="input-group__input" type="text" id="creditCard" name="creditCard" placeholder="0000 - 0000 - 0000 - 0000" />
          <span class="input-group__error"></span>
        </div>

        <div class="checkout__cvv input-group">
          <label class="input-group__label" for="cvv">Security code</label>
          <input class="input-group__input" type="password" id="cvv" name="CVV" placeholder="***" maxlength="3" />
          <img class="input-group__help" src="./images/iconHelp.png" alt="Help" title="Three-digit verification number" />
          <span class="input-group__error"></span>
        </div>

        <div class="checkout__exp-date input-group">
          <label class="input-group__label" for="expDate">Expiration date</label>
          <input class="input-group__input" type="text" id="expDate" name="expDate" placeholder="MM / YY" />
          <span class="input-group__error"></span>
        </div>
      </div>

      <button class="checkout__button" type="submit">Complete Purchase</button>
    </form>

    {{-- RECEIPT  --}}
    <div class="checkout__receipt receipt">
      <div class="receipt__content">
        <div class="receipt__title">Your Order</div>

        <ul class="receipt__items">
          <li class="receipt__item">
            <h4 class="receipt__item-title">Apple Watch Sport</h4>
            <span class="receipt__item-price">$ 580</span>
          </li>
          <li class="receipt__item">
            <h4 class="receipt__item-title">Modern Buckle</h4>
            <span class="receipt__item-price">$ 380</span>
          </li>
        </ul>

        <div class="receipt__summary">
          <div class="receipt__summary-item">
            <h4 class="receipt__summary-title">Total purchases</h4>
            <span class="receipt__summary-price">$ 960.00</span>
          </div>

          <div class="receipt__summary-item">
            <h4 class="receipt__summary-title">Estimated tax</h4>
            <span class="receipt__summary-price">$ 0</span>
          </div>
        </div>

        <div class="receipt__total">
          <h4 class="receipt__total-title">Total</h4>
          <span class="receipt__total-price">$ 960</span>
        </div>

      </div>
    </div>


    {{--  CREDITS  --}}
    <div class="checkout__credits credits" id="credits">
			<button class="credits__button" id="closeCreditsButton">&times;</button>

			<div class="credits__wrapper">
				<div class="credits__message">
					<h3 class="credits__message-title">Hi There!</h3>
					<p class="credits__message-text">Thanks for the challenge. It was fun, hehe. Looking forward to hearing from you. Any feedback is always appreciated! :)</p>
				</div>

				<h2 class="credits__title">Challenge completed by</h2>

				<ul class="credits__team">
					<li class="credits__member">
						<span class="credits__member-job">Team Lead</span>
						<span class="credits__member-name">Dmytro Vasyliev</span>
					</li>
          <li class="credits__member">
						<span class="credits__member-job">Scrum Master</span>
						<span class="credits__member-name">Dmytro Vasyliev</span>
					</li>
					<li class="credits__member">
						<span class="credits__member-job">Front-end Developer</span>
						<span class="credits__member-name">Dmytro Vasyliev</span>
					</li>
					<li class="credits__member">
						<span class="credits__member-job">Back-end Developer</span>
						<span class="credits__member-name">Dmytro Vasyliev</span>
					</li>
					<li class="credits__member">
						<span class="credits__member-job">UX Designer</span>
						<span class="credits__member-name">Dmytro Vasyliev</span>
					</li>
					<li class="credits__member">
						<span class="credits__member-job">UI Designer (Not Really)</span>
						<span class="credits__member-name">Dmytro Vasyliev</span>
					</li>
					<li class="credits__member">
						<span class="credits__member-job">Quality Assurance Engineer</span>
						<span class="credits__member-name">Dmytro Vasyliev</span>
					</li>
					<li class="credits__member credits__member--honorable">
						<span class="credits__member-job">Honorable mentions</span>
						<span class="credits__member-name">Dmytro Vasyliev</span>
						<span class="credits__member-name">stackoverflow.com</span>
					</li>
				</ul>
			</div>
		</div>

  </div>

  <script>
        
    // VARIABLES
    const form = document.getElementById("form");

    const firstNameInput = document.getElementById("firstName");
    const lastNameInput = document.getElementById("lastName");
    const emailInput = document.getElementById("email");
    const postalCodeInput = document.getElementById("postalCode");
    const phoneInput = document.getElementById("phone");
    const creditCardInput = document.getElementById("creditCard");
    const cvvInput = document.getElementById("cvv");
    const expDateInput = document.getElementById("expDate");

    const inputsToValidate = [
      firstNameInput,
      lastNameInput,
      emailInput,
      postalCodeInput,
      phoneInput,
      creditCardInput,
      cvvInput,
      expDateInput,
    ];


    // DELAY INPUT VALIDATION
    const debounce = (fn, delay = 1500) => {
      let timeoutId;

      return (...args) => {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }

        timeoutId = setTimeout(() => {
          fn.apply(null, args);
        }, delay);
      };
    };


    // EVENT LISTENERS
    form.addEventListener("submit", e => {
      e.preventDefault();

      const isFirstNameValid = checkFirstName(),
        isLastNameValid = checkLastName(),
        isEmailValid = checkEmail(),
        isPostalCodeValid = checkPostalCode(),
        isPhoneValid = checkPhone(),
        isCreditCardValid = checkCreditCard(),
        isCVVValid = checkCVV(),
        isExpDateValid = checkExpDate();

      const isFormValid =
        isFirstNameValid &&
        isLastNameValid &&
        isEmailValid &&
        isPostalCodeValid &&
        isPhoneValid &&
        isCreditCardValid &&
        isCVVValid &&
        isExpDateValid;

      if (isFormValid) {

        const formData = new FormData(e.target);
        const request = new Request("/order", {body: formData, method: "POST" });

        fetch(request)
          .then(res => res.json())
          .then(data => {
            if(data.message !== undefined) { 
              alert(data.message);
              showCredits();
            } else {
              alert("Something went wrong. Please try again.");
            }
          })
          .catch(error => { 
            console.log(error);
            alert(error.message);
          }); 
      }
    });

    inputsToValidate.forEach(input =>
      input.addEventListener(
        "input",
        debounce(e => {
          switch (e.target.id) {
            case "firstName":
              checkFirstName();
              break;

            case "lastName":
              checkLastName();
              break;

            case "email":
              checkEmail();
              break;

            case "postalCode":
              checkPostalCode();
              break;

            case "phone":
              checkPhone();
              break;

            case "creditCard":
              checkCreditCard();
              break;

            case "cvv":
              checkCVV();
              break;

            case "expDate":
              checkExpDate();
              break;

            default:
              console.log("Unexpected input");
          }
        })
      )
    );


    // INPUT VALIDATORS
    const checkFirstName = () => {
      let isValid = false;
      const firstName = firstNameInput.value.trim();

      if (isEmpty(firstName)) {
        setError(firstNameInput, "First name cannot be empty");
      } else {
        setSuccess(firstNameInput);
        isValid = true;
      }

      return isValid;
    };

    const checkLastName = () => {
      let isValid = false;
      const lastName = lastNameInput.value.trim();

      if (isEmpty(lastName)) {
        setError(lastNameInput, "Last name cannot be empty");
      } else {
        setSuccess(lastNameInput);
        isValid = true;
      }

      return isValid;
    };

    const checkEmail = () => {
      let isValid = false;
      const email = emailInput.value.trim();
      const regex =
        /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

      if (isEmpty(email)) {
        setError(emailInput, "Email cannot be empty");
      } else if (isNotValid(regex, email)) {
        setError(emailInput, "Invalid syntax. Expected format: elon@spacex.com");
      } else {
        setSuccess(emailInput);
        isValid = true;
      }

      return isValid;
    };

    const checkPostalCode = () => {
      let isValid = false;
      const postalCode = postalCodeInput.value.trim();
      const regex = /^[0-9]{5}$/;

      if (isEmpty(postalCode)) {
        setError(postalCodeInput, "Postal code cannot be empty");
      } else if (isNotValid(regex, postalCode)) {
        setError(postalCodeInput, "Postal code must be 5 digits long");
      } else {
        setSuccess(postalCodeInput);
        isValid = true;
      }

      return isValid;
    };

    const checkPhone = () => {
      let isValid = false;
      const phone = phoneInput.value.trim();
      const regex = /^[0-9]{9}$/;

      if (isEmpty(phone)) {
        setError(phoneInput, "Phone number cannot be empty");
      } else if (isNotValid(regex, phone)) {
        setError(phoneInput, "Phone number must be 9 digits long");
      } else {
        setSuccess(phoneInput);
        isValid = true;
      }

      return isValid;
    };

    const checkCreditCard = () => {
      let isValid = false;
      const creditCard = creditCardInput.value.trim();
      const regex = /^[0-9]{16}$/;

      if (isEmpty(creditCard)) {
        setError(creditCardInput, "Credit card number cannot be empty");
      } else if (isNotValid(regex, creditCard)) {
        setError(creditCardInput, "Credit card number must be 16 digits long");
      } else {
        setSuccess(creditCardInput);
        isValid = true;
      }

      return isValid;
    };

    const checkCVV = () => {
      let isValid = false;
      const CVV = cvvInput.value.trim();
      const regex = /^[0-9]{3}$/;

      if (isEmpty(CVV)) {
        setError(cvvInput, "Security code cannot be empty");
      } else if (isNotValid(regex, CVV)) {
        setError(cvvInput, "Security code must be 3 digits long");
      } else {
        setSuccess(cvvInput);
        isValid = true;
      }

      return isValid;
    };

    const checkExpDate = () => {
      let isValid = false;
      const expDate = expDateInput.value.trim();
      const regex = /^[0-9]{2}\/[0-9]{2}$/;

      if (isEmpty(expDate)) {
        setError(expDateInput, "Expiration date cannot be empty");
      } else if (isNotValid(regex, expDate)) {
        setError(expDateInput, "Invalid syntax. Expected format: 09/05");
      } else {
        setSuccess(expDateInput);
        isValid = true;
      }

      return isValid;
    };


    // HELPER FUNCTIONS
    const isEmpty = inputValue => (!inputValue.length ? true : false);
    const isNotValid = (regex, email) => !regex.test(email);


    // STYLE FUNCTIONS
    const setError = (input, message) => {
      const inputGroup = input.parentElement;

      inputGroup.classList.remove("input-group--success");
      inputGroup.classList.add("input-group--error");

      const error = inputGroup.querySelector("span");
      error.innerText = message;
    };

    const setSuccess = input => {
      const inputGroup = input.parentElement;

      inputGroup.classList.remove("input-group--error");
      inputGroup.classList.add("input-group--success");

      const error = inputGroup.querySelector("span");
      error.innerText = "";
    };


    // CREDITS
    const credits = document.getElementById("credits");
    const closeCreditsButton = document.getElementById("closeCreditsButton");

    const showCredits = () => {
      credits.classList.add("credits--active");
      form.style.display = "none";
    };

    const closeCredits = () => {
      credits.classList.remove("credits--active");
      form.style.display = "flex";
    };

    closeCreditsButton.addEventListener("click", closeCredits);

  </script>
@end